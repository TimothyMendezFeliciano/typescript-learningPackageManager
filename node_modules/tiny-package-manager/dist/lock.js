"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const yaml = require("js-yaml");
// Yep, this is the lock.
const lock = Object.create(null);
/**
 * Save the information of a package to the lock.
 * If that information is not existed in the lock, create it.
 * Otherwise, just update it.
 */
function updateOrCreate(name, info) {
    // Create it if that information is not existed in the lock.
    if (!lock[name]) {
        lock[name] = Object.create(null);
    }
    // Then update it.
    Object.assign(lock[name], info);
}
exports.updateOrCreate = updateOrCreate;
/**
 * Retrieve the information of a package by name and it's semantic
 * version range.
 *
 * Note that we don't return the data directly.
 * That is, we just do format the data,
 * which make the data structure similar to npm registry.
 *
 * This can let us avoid changing the logic of the `collectDeps`
 * function in the `list` module.
 */
function getItem(name, constraint) {
    // Retrieve an item by a key from the lock.
    // The format of the key is similar and inspired by Yarn's `yarn.lock` file.
    const item = lock[`${name}@${constraint}`];
    // Return `null` instead of `undefined` if we cannot find that.
    if (!item) {
        return null;
    }
    // Convert the data structure as the comment above.
    return {
        [item.version]: {
            dependencies: item.dependencies,
            dist: { shasum: item.shasum, tarball: item.url }
        }
    };
}
exports.getItem = getItem;
/**
 * Simply save the lock file.
 */
async function writeLock() {
    // Sort the keys of the lock.
    // This is necessary because each time you use the package manager,
    // the order will not be same.
    // Sort it makes useful for git diff.
    const sorted = Object.keys(lock)
        .sort()
        .reduce((total, current) => {
        total[current] = lock[current];
        return total;
    }, {});
    await fs.writeFile('./tiny-pm.yml', yaml.safeDump(sorted, { noRefs: true }));
}
exports.writeLock = writeLock;
/**
 * Simply read the lock file.
 * Skip it if we cannot find the lock file.
 */
async function readLock() {
    if (await fs.pathExists('./tiny-pm.yml')) {
        Object.assign(lock, yaml.safeLoad(await fs.readFile('./tiny-pm.yml', 'utf-8')));
    }
}
exports.readLock = readLock;
